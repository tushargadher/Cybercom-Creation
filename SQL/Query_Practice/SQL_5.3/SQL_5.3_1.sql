create database practice5_3;
use practice5_3;

create table customers(
customer_id int not null primary key auto_increment,
customer_name varchar(30) not null,
customer_country varchar(30) not null
);

create table products(
product_id int not null primary key auto_increment,
product_name varchar(30) not null,
price decimal(10,2)
);

create table employees(
emp_id int not null auto_increment primary key,
emp_name varchar(30) not null,
emp_salary decimal(10,2) not null,
emp_country varchar(30) not null
);

create table orders(
order_id int not null primary key auto_increment,
customer_id int not null,
sold_by int not null,
product_id int not null,
foreign key(customer_id) references customers(customer_id),
foreign key(product_id) references products(product_id),
foreign key(sold_by) references employees(emp_id)
);


INSERT INTO customers (customer_name, customer_country)
VALUES
    ('Alice', 'USA'),
    ('Bob', 'LONDON'),
    ('Charlie', 'USA'),
    ('David', 'CANADA'),
    ('Emily', 'USA');

INSERT INTO products (product_name, price)
VALUES
    ('Laptop', 12000.00),
    ('Smartphone', 1800.00),
    ('Headphones', 1300.00),
    ('Tablet', 2500.00),
    ('Speaker', 3150.00);

INSERT INTO employees (emp_name, emp_salary, emp_country)
VALUES
    ('John', 40000.00, 'USA'),
    ('Sarah', 63000.00, 'CANADA'),
    ('Jock', 50000.00, 'USA'),
    ('Keny', 56000.00, 'CANADA');
    
INSERT INTO orders (customer_id,sold_by,product_id)
VALUES
    (1,1,1),
    (2,2,3),
	(3,3,2),
    (4,4,4),
	(5,1,5),
    (2,1,2),
	(4,1,3),
    (5,1,4);

-- 1.	Write a SQL query to retrieve the names and salaries of all employees who have a salary greater than the average salary of all employees.

		select emp_name,emp_salary
		from employees 
		where emp_salary > (select avg(emp_salary) from employees);
    
-- 2.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order.
 
        select c.customer_name,sum(p.price) as TotalRevenue 
        from customers as c
        inner join orders as o 
        on o.customer_id = c.customer_id
        inner join products as p
        on p.product_id = o.product_id
        group by c.customer_id
        order by TotalRevenue desc;
 
-- 3.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table,
--  sorted by revenue in descending order, where the total revenue is greater than $10,000.
 
		select c.customer_name,sum(p.price) as TotalRevenue 
        from customers as c
        inner join orders as o 
        on o.customer_id = c.customer_id
        inner join products as p
        on p.product_id = o.product_id
        group by c.customer_id
		having sum(p.price) > 10000
        order by TotalRevenue desc;
 
 
-- 4.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, 
-- where the total revenue is greater than the average revenue generated by all customers.
 

		select c.customer_name,sum(p.price) as TotalRevenue 
        from customers as c 
        inner join orders as o on o.customer_id = c.customer_id
        inner join products as p on p.product_id = o.product_id
        group by c.customer_id
        having TotalRevenue > (
									select avg(p.price) as TotalRevenue from customers as c
									inner join orders as o on o.customer_id = c.customer_id
									inner join products as p on p.product_id = o.product_id
							  )
        order by TotalRevenue desc;
 
-- 5.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order,
--  where the total revenue is greater than the average revenue generated by all customers, and the customer is from the "USA" or "Canada".
 
		select c.customer_name,sum(p.price) as TotalRevenue 
        from customers as c 
        inner join orders as o on o.customer_id = c.customer_id
        inner join products as p on p.product_id = o.product_id
		where c.customer_country in ('USA','CANADA')
        group by c.customer_id
        having TotalRevenue > (
									select avg(p.price) as TotalRevenue from customers as c 
									inner join orders as o on o.customer_id = c.customer_id
									inner join products as p on o.product_id = p.product_id
				              )
        order by TotalRevenue desc;
     
-- 6.	Write a SQL query to retrieve the names of all employees who have made sales greater than $50,000 in the "orders" table.
  
        select e.emp_name,sum(p.price) as TotalSales from employees as e
        inner join orders as o 
        on e.emp_id = o.sold_by
        inner join products as p
        on p.product_id = o.product_id
        group by e.emp_id
        having TotalSales > 50000;
 

-- 7.	Write a SQL query to retrieve the names of all employees who have made sales greater than the average sales of all employees in the "orders" table, sorted by sales in descending order.
  
 
       select e.emp_name ,sum(p.price) as TotalSales from employees as e
       inner join orders as o
       on e.emp_id = o.sold_by
       inner join products as p
       on p.product_id = o.product_id
       group by e.emp_id
       having TotalSales > (
							   select avg(p.price) from employees as e
							   inner join orders as o on e.emp_id = o.sold_by
							   inner join products as p on p.product_id = o.product_id						  
							)
       order by TotalSales desc;
      
 
-- 8.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, 
-- where the customer is from the "USA" and the revenue is greater than $5,000.
 
      select c.customer_name,sum(p.price) as TotalRevenue from customers as c
      inner join orders as o
      on o.customer_id = c.customer_id
      inner join products as p
      on p.product_id = o.product_id
      where c.customer_country ='USA'
      group by c.customer_id
      having TotalRevenue > 5000
      order by TotalRevenue desc;
 
 
-- 9.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, 
-- where the customer is from the "USA" and the revenue is greater than the average revenue generated by all customers from the "USA".

    select c.customer_name,sum(p.price) as TotalRevenue from customers as c
    inner join orders as o
    on o.customer_id = c.customer_id
    inner join products as p
    on p.product_id = o.product_id
    where c.customer_country ='USA'
    group by c.customer_id
    having TotalRevenue>(
                          select avg(p.price) as average from customers as c
						  inner join orders as o on o.customer_id = c.customer_id
						  inner join products as p on p.product_id = o.product_id
						  where c.customer_country = 'USA'
                        )
    order by TotalRevenue desc;

    
-- 10.	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, 
-- where the customer is from the "USA" and the revenue is greater than the average revenue generated by all customers, and the customer has made at least 2 orders.

    select c.customer_name,sum(p.price) as TotalRevenue ,count(c.customer_id) as TotalOrders from customers as c
    inner join orders as o
    on o.customer_id = c.customer_id
    inner join products as p
    on p.product_id = o.product_id
    where c.customer_country ='USA'
    group by c.customer_id
    having TotalRevenue>(
                          select avg(p.price) as average from customers as c
						  inner join orders as o on o.customer_id = c.customer_id
						  inner join products as p on p.product_id = o.product_id
                        ) and TotalOrders >= 2
    order by TotalRevenue desc;
    
    
    


